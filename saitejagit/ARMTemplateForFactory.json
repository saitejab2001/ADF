{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "saitejagit"
		},
		"customer_city_2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'customer_city_2'"
		},
		"customeroutput_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'customeroutput'"
		},
		"saitejacustomer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'saitejacustomer'"
		},
		"customer_city_2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://outputstoragesaiteja.dfs.core.windows.net/"
		},
		"customeroutput_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://outputstoragesaiteja.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "saitejacustomer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "CustomerData (2).csv",
						"container": "sourcesaiteja"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/saitejacustomer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "saitejacustomer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "CustomerData (2).csv",
						"container": "sourcesaiteja"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "NoOfChildren",
						"type": "String"
					},
					{
						"name": "MinAgeOfChild",
						"type": "String"
					},
					{
						"name": "MaxAgeOfChild",
						"type": "String"
					},
					{
						"name": "Tenure",
						"type": "String"
					},
					{
						"name": "FrquncyOfPurchase",
						"type": "String"
					},
					{
						"name": "NoOfUnitsPurchased",
						"type": "String"
					},
					{
						"name": "FrequencyOFPlay",
						"type": "String"
					},
					{
						"name": "NoOfGamesPlayed",
						"type": "String"
					},
					{
						"name": "NoOfGamesBought",
						"type": "String"
					},
					{
						"name": "FavoriteChannelOfTransaction",
						"type": "String"
					},
					{
						"name": "FavoriteGame",
						"type": "String"
					},
					{
						"name": "TotalRevenueGenerated",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/saitejacustomer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "customeroutput",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "sourceoutput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Kochi",
						"type": "String"
					},
					{
						"name": "32",
						"type": "String"
					},
					{
						"name": "2366",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/customeroutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "customer_city_2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/customer_city_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/customer_city_2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('customer_city_2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('customer_city_2_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/customeroutput')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('customeroutput_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('customeroutput_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/saitejacustomer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('saitejacustomer_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText2",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "split1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "aggregate2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as string,",
						"          City as string,",
						"          NoOfChildren as string,",
						"          MinAgeOfChild as string,",
						"          MaxAgeOfChild as string,",
						"          Tenure as string,",
						"          FrquncyOfPurchase as string,",
						"          NoOfUnitsPurchased as string,",
						"          FrequencyOFPlay as string,",
						"          NoOfGamesPlayed as string,",
						"          NoOfGamesBought as string,",
						"          FavoriteChannelOfTransaction as string,",
						"          FavoriteGame as string,",
						"          TotalRevenueGenerated as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 split(equals(City, \"1\"),",
						"     disjoint: false) ~> split1@(city1, city2)",
						"split1@city1 filter(toInteger(NoOfChildren) <=5) ~> filter1",
						"filter1 aggregate(groupBy(NoOfChildren),",
						"     total_revenue_customer = sum(toInteger(TotalRevenueGenerated))) ~> aggregate1",
						"split1@city2 filter(toInteger(NoOfChildren)<=5) ~> filter2",
						"filter2 aggregate(groupBy(NoOfChildren),",
						"     revenue_customer_2 = sum(toInteger(TotalRevenueGenerated))) ~> aggregate2",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Kochi as string,",
						"          {32} as string,",
						"          {2366} as string",
						"     ),",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1",
						"aggregate2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Kochi as string,",
						"          {32} as string,",
						"          {2366} as string",
						"     ),",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText2')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText3')]"
			]
		}
	]
}